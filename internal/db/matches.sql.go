// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: matches.sql

package db

import (
	"context"
)

const completeMatch = `-- name: CompleteMatch :exec
UPDATE matches
SET home_score = ?,
    away_score = ?,
    is_completed = 1,
    completed_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE fixture_id = ?
`

type CompleteMatchParams struct {
	HomeScore int64 `json:"home_score"`
	AwayScore int64 `json:"away_score"`
	FixtureID int64 `json:"fixture_id"`
}

func (q *Queries) CompleteMatch(ctx context.Context, arg CompleteMatchParams) error {
	_, err := q.db.ExecContext(ctx, completeMatch, arg.HomeScore, arg.AwayScore, arg.FixtureID)
	return err
}

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (
    fixture_id,
    current_minute,
    current_half,
    home_score,
    away_score,
    active_zone,
    home_attacking_direction
)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, fixture_id, current_minute, current_half, home_score, away_score, active_zone, home_attacking_direction, is_completed, completed_at, created_at, updated_at
`

type CreateMatchParams struct {
	FixtureID              int64 `json:"fixture_id"`
	CurrentMinute          int64 `json:"current_minute"`
	CurrentHalf            int64 `json:"current_half"`
	HomeScore              int64 `json:"home_score"`
	AwayScore              int64 `json:"away_score"`
	ActiveZone             int64 `json:"active_zone"`
	HomeAttackingDirection int64 `json:"home_attacking_direction"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.FixtureID,
		arg.CurrentMinute,
		arg.CurrentHalf,
		arg.HomeScore,
		arg.AwayScore,
		arg.ActiveZone,
		arg.HomeAttackingDirection,
	)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.FixtureID,
		&i.CurrentMinute,
		&i.CurrentHalf,
		&i.HomeScore,
		&i.AwayScore,
		&i.ActiveZone,
		&i.HomeAttackingDirection,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIncompleteMatchByFixtureID = `-- name: DeleteIncompleteMatchByFixtureID :exec
DELETE FROM matches WHERE fixture_id = ? AND is_completed = 0
`

func (q *Queries) DeleteIncompleteMatchByFixtureID(ctx context.Context, fixtureID int64) error {
	_, err := q.db.ExecContext(ctx, deleteIncompleteMatchByFixtureID, fixtureID)
	return err
}

const deleteMatch = `-- name: DeleteMatch :exec
DELETE FROM matches WHERE id = ?
`

func (q *Queries) DeleteMatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMatch, id)
	return err
}

const getCompletedMatches = `-- name: GetCompletedMatches :many
SELECT id, fixture_id, current_minute, current_half, home_score, away_score, active_zone, home_attacking_direction, is_completed, completed_at, created_at, updated_at FROM matches WHERE is_completed = 1 ORDER BY completed_at DESC
`

func (q *Queries) GetCompletedMatches(ctx context.Context) ([]Match, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Match{}
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.FixtureID,
			&i.CurrentMinute,
			&i.CurrentHalf,
			&i.HomeScore,
			&i.AwayScore,
			&i.ActiveZone,
			&i.HomeAttackingDirection,
			&i.IsCompleted,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMatchByFixtureID = `-- name: GetMatchByFixtureID :one
SELECT id, fixture_id, current_minute, current_half, home_score, away_score, active_zone, home_attacking_direction, is_completed, completed_at, created_at, updated_at FROM matches WHERE fixture_id = ? LIMIT 1
`

func (q *Queries) GetMatchByFixtureID(ctx context.Context, fixtureID int64) (Match, error) {
	row := q.db.QueryRowContext(ctx, getMatchByFixtureID, fixtureID)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.FixtureID,
		&i.CurrentMinute,
		&i.CurrentHalf,
		&i.HomeScore,
		&i.AwayScore,
		&i.ActiveZone,
		&i.HomeAttackingDirection,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMatchByID = `-- name: GetMatchByID :one
SELECT id, fixture_id, current_minute, current_half, home_score, away_score, active_zone, home_attacking_direction, is_completed, completed_at, created_at, updated_at FROM matches WHERE id = ? LIMIT 1
`

func (q *Queries) GetMatchByID(ctx context.Context, id int64) (Match, error) {
	row := q.db.QueryRowContext(ctx, getMatchByID, id)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.FixtureID,
		&i.CurrentMinute,
		&i.CurrentHalf,
		&i.HomeScore,
		&i.AwayScore,
		&i.ActiveZone,
		&i.HomeAttackingDirection,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMatch = `-- name: UpdateMatch :exec
UPDATE matches
SET current_minute = ?,
    current_half = ?,
    home_score = ?,
    away_score = ?,
    active_zone = ?,
    home_attacking_direction = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateMatchParams struct {
	CurrentMinute          int64 `json:"current_minute"`
	CurrentHalf            int64 `json:"current_half"`
	HomeScore              int64 `json:"home_score"`
	AwayScore              int64 `json:"away_score"`
	ActiveZone             int64 `json:"active_zone"`
	HomeAttackingDirection int64 `json:"home_attacking_direction"`
	ID                     int64 `json:"id"`
}

func (q *Queries) UpdateMatch(ctx context.Context, arg UpdateMatchParams) error {
	_, err := q.db.ExecContext(ctx, updateMatch,
		arg.CurrentMinute,
		arg.CurrentHalf,
		arg.HomeScore,
		arg.AwayScore,
		arg.ActiveZone,
		arg.HomeAttackingDirection,
		arg.ID,
	)
	return err
}
