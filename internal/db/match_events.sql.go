// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: match_events.sql

package db

import (
	"context"
	"database/sql"
)

const createMatchEvent = `-- name: CreateMatchEvent :one
INSERT INTO match_events (
    match_id,
    event_type,
    minute,
    team_side,
    player_name
)
VALUES (?, ?, ?, ?, ?)
RETURNING id, match_id, event_type, minute, team_side, player_name, created_at
`

type CreateMatchEventParams struct {
	MatchID    int64          `json:"match_id"`
	EventType  int64          `json:"event_type"`
	Minute     int64          `json:"minute"`
	TeamSide   string         `json:"team_side"`
	PlayerName sql.NullString `json:"player_name"`
}

func (q *Queries) CreateMatchEvent(ctx context.Context, arg CreateMatchEventParams) (MatchEvent, error) {
	row := q.db.QueryRowContext(ctx, createMatchEvent,
		arg.MatchID,
		arg.EventType,
		arg.Minute,
		arg.TeamSide,
		arg.PlayerName,
	)
	var i MatchEvent
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.EventType,
		&i.Minute,
		&i.TeamSide,
		&i.PlayerName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMatchEvents = `-- name: DeleteMatchEvents :exec
DELETE FROM match_events WHERE match_id = ?
`

func (q *Queries) DeleteMatchEvents(ctx context.Context, matchID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMatchEvents, matchID)
	return err
}

const getEventsByMatchID = `-- name: GetEventsByMatchID :many
SELECT id, match_id, event_type, minute, team_side, player_name, created_at FROM match_events
WHERE match_id = ?
ORDER BY minute, id
`

func (q *Queries) GetEventsByMatchID(ctx context.Context, matchID int64) ([]MatchEvent, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByMatchID, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MatchEvent{}
	for rows.Next() {
		var i MatchEvent
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.EventType,
			&i.Minute,
			&i.TeamSide,
			&i.PlayerName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
