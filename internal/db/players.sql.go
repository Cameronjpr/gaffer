// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: players.sql

package db

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (club_id, name, quality)
VALUES (?, ?, ?)
RETURNING id, club_id, name, quality, created_at
`

type CreatePlayerParams struct {
	ClubID  int64  `json:"club_id"`
	Name    string `json:"name"`
	Quality int64  `json:"quality"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.ClubID, arg.Name, arg.Quality)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.ClubID,
		&i.Name,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players WHERE id = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, club_id, name, quality, created_at FROM players WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.ClubID,
		&i.Name,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayersByClubID = `-- name: GetPlayersByClubID :many
SELECT id, club_id, name, quality, created_at FROM players WHERE club_id = ? ORDER BY id
`

func (q *Queries) GetPlayersByClubID(ctx context.Context, clubID int64) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersByClubID, clubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.ClubID,
			&i.Name,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
