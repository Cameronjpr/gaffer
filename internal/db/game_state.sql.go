// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: game_state.sql

package db

import (
	"context"
)

const createGameState = `-- name: CreateGameState :one
INSERT INTO game_states (selected_club_id, manager_name, created_at)
VALUES (?, ?, NOW())
RETURNING id, selected_club_id, manager_name, created_at, updated_at
`

type CreateGameStateParams struct {
	SelectedClubID int64  `json:"selected_club_id"`
	ManagerName    string `json:"manager_name"`
}

func (q *Queries) CreateGameState(ctx context.Context, arg CreateGameStateParams) (GameState, error) {
	row := q.db.QueryRowContext(ctx, createGameState, arg.SelectedClubID, arg.ManagerName)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.SelectedClubID,
		&i.ManagerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllGameStates = `-- name: DeleteAllGameStates :exec
DELETE FROM game_states
`

func (q *Queries) DeleteAllGameStates(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllGameStates)
	return err
}

const deleteGameState = `-- name: DeleteGameState :exec
DELETE FROM game_states WHERE id = ?
`

func (q *Queries) DeleteGameState(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGameState, id)
	return err
}

const getAllGameState = `-- name: GetAllGameState :many
SELECT id, selected_club_id, manager_name, created_at, updated_at FROM game_states ORDER BY id
`

func (q *Queries) GetAllGameState(ctx context.Context) ([]GameState, error) {
	rows, err := q.db.QueryContext(ctx, getAllGameState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameState{}
	for rows.Next() {
		var i GameState
		if err := rows.Scan(
			&i.ID,
			&i.SelectedClubID,
			&i.ManagerName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostRecentGameState = `-- name: GetMostRecentGameState :one
SELECT id, selected_club_id, manager_name, created_at, updated_at FROM game_states ORDER BY updated_at DESC LIMIT 1
`

func (q *Queries) GetMostRecentGameState(ctx context.Context) (GameState, error) {
	row := q.db.QueryRowContext(ctx, getMostRecentGameState)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.SelectedClubID,
		&i.ManagerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGameState = `-- name: UpdateGameState :one
UPDATE game_states SET selected_club_id = ?, manager_name = ?, updated_at = NOW()
WHERE id = ?
RETURNING id, selected_club_id, manager_name, created_at, updated_at
`

type UpdateGameStateParams struct {
	SelectedClubID int64  `json:"selected_club_id"`
	ManagerName    string `json:"manager_name"`
	ID             int64  `json:"id"`
}

func (q *Queries) UpdateGameState(ctx context.Context, arg UpdateGameStateParams) (GameState, error) {
	row := q.db.QueryRowContext(ctx, updateGameState, arg.SelectedClubID, arg.ManagerName, arg.ID)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.SelectedClubID,
		&i.ManagerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
