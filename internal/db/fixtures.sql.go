// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: fixtures.sql

package db

import (
	"context"
)

const createFixture = `-- name: CreateFixture :one
INSERT INTO fixtures (gameweek, home_team_id, away_team_id)
VALUES (?, ?, ?)
RETURNING id, gameweek, home_team_id, away_team_id, created_at
`

type CreateFixtureParams struct {
	Gameweek   int64 `json:"gameweek"`
	HomeTeamID int64 `json:"home_team_id"`
	AwayTeamID int64 `json:"away_team_id"`
}

func (q *Queries) CreateFixture(ctx context.Context, arg CreateFixtureParams) (Fixture, error) {
	row := q.db.QueryRowContext(ctx, createFixture, arg.Gameweek, arg.HomeTeamID, arg.AwayTeamID)
	var i Fixture
	err := row.Scan(
		&i.ID,
		&i.Gameweek,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFixture = `-- name: DeleteFixture :exec
DELETE FROM fixtures WHERE id = ?
`

func (q *Queries) DeleteFixture(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFixture, id)
	return err
}

const getAllFixtures = `-- name: GetAllFixtures :many
SELECT id, gameweek, home_team_id, away_team_id, created_at FROM fixtures ORDER BY id
`

func (q *Queries) GetAllFixtures(ctx context.Context) ([]Fixture, error) {
	rows, err := q.db.QueryContext(ctx, getAllFixtures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fixture{}
	for rows.Next() {
		var i Fixture
		if err := rows.Scan(
			&i.ID,
			&i.Gameweek,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFixtureByID = `-- name: GetFixtureByID :one
SELECT id, gameweek, home_team_id, away_team_id, created_at FROM fixtures WHERE id = ? LIMIT 1
`

func (q *Queries) GetFixtureByID(ctx context.Context, id int64) (Fixture, error) {
	row := q.db.QueryRowContext(ctx, getFixtureByID, id)
	var i Fixture
	err := row.Scan(
		&i.ID,
		&i.Gameweek,
		&i.HomeTeamID,
		&i.AwayTeamID,
		&i.CreatedAt,
	)
	return i, err
}

const getFixturesByClubID = `-- name: GetFixturesByClubID :many
SELECT id, gameweek, home_team_id, away_team_id, created_at FROM fixtures
WHERE home_team_id = ? OR away_team_id = ?
ORDER BY id
`

type GetFixturesByClubIDParams struct {
	HomeTeamID int64 `json:"home_team_id"`
	AwayTeamID int64 `json:"away_team_id"`
}

func (q *Queries) GetFixturesByClubID(ctx context.Context, arg GetFixturesByClubIDParams) ([]Fixture, error) {
	rows, err := q.db.QueryContext(ctx, getFixturesByClubID, arg.HomeTeamID, arg.AwayTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fixture{}
	for rows.Next() {
		var i Fixture
		if err := rows.Scan(
			&i.ID,
			&i.Gameweek,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnplayedByClubID = `-- name: GetUnplayedByClubID :many
SELECT f.id, f.gameweek, f.home_team_id, f.away_team_id, f.created_at
FROM fixtures f
LEFT JOIN matches m ON m.fixture_id = f.id AND m.is_completed = 1
WHERE (f.home_team_id = ?1 OR f.away_team_id = ?1)
  AND m.id IS NULL
ORDER BY f.gameweek, f.id
`

func (q *Queries) GetUnplayedByClubID(ctx context.Context, homeTeamID int64) ([]Fixture, error) {
	rows, err := q.db.QueryContext(ctx, getUnplayedByClubID, homeTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fixture{}
	for rows.Next() {
		var i Fixture
		if err := rows.Scan(
			&i.ID,
			&i.Gameweek,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
