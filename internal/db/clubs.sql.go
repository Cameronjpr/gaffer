// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: clubs.sql

package db

import (
	"context"
)

const createClub = `-- name: CreateClub :one
INSERT INTO clubs (name, strength, background_color, foreground_color)
VALUES (?, ?, ?, ?)
RETURNING id, name, strength, background_color, foreground_color, created_at
`

type CreateClubParams struct {
	Name            string `json:"name"`
	Strength        int64  `json:"strength"`
	BackgroundColor string `json:"background_color"`
	ForegroundColor string `json:"foreground_color"`
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClub,
		arg.Name,
		arg.Strength,
		arg.BackgroundColor,
		arg.ForegroundColor,
	)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Strength,
		&i.BackgroundColor,
		&i.ForegroundColor,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClub = `-- name: DeleteClub :exec
DELETE FROM clubs WHERE id = ?
`

func (q *Queries) DeleteClub(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClub, id)
	return err
}

const getAllClubs = `-- name: GetAllClubs :many
SELECT id, name, strength, background_color, foreground_color, created_at FROM clubs ORDER BY name
`

func (q *Queries) GetAllClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getAllClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Club{}
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Strength,
			&i.BackgroundColor,
			&i.ForegroundColor,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubByID = `-- name: GetClubByID :one
SELECT id, name, strength, background_color, foreground_color, created_at FROM clubs WHERE id = ? LIMIT 1
`

func (q *Queries) GetClubByID(ctx context.Context, id int64) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClubByID, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Strength,
		&i.BackgroundColor,
		&i.ForegroundColor,
		&i.CreatedAt,
	)
	return i, err
}

const getClubByName = `-- name: GetClubByName :one
SELECT id, name, strength, background_color, foreground_color, created_at FROM clubs WHERE name = ? LIMIT 1
`

func (q *Queries) GetClubByName(ctx context.Context, name string) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClubByName, name)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Strength,
		&i.BackgroundColor,
		&i.ForegroundColor,
		&i.CreatedAt,
	)
	return i, err
}
